#summary This page explains the reason why I have created these code examples

= Letter of Motivation =

Here I'd like to explain the reason why I have created these code examples:

==== Code Examples ====

 * [LoginExample Login Example] with Flex 3 and Flex 4 (Halo, Gumbo, Hero)
 * [ReligionChooser Religion Chooser] with Flex 4 (Gumbo)

==== Why have I created these code examples? ====

 # I desirably love coding Flex :)
 # When applying for new jobs as Flex developer I usually show my clients these code examples so that they can evaluate if my Flex skills are of need to them. 
 # Because I haven't found any comparable Microarchitecture examples like this, I decided to create them myself 
 # I am trying to get feedback from the Flex community to improve the way I am suggesting coding Flex.
 # Because Flex is still a very young technology I am trying to give Flex beginners the opportunity to compare existing frameworks and architectures so that they can speed up their development time, and thereby, using less bad coding practices. 
 # For the moment, I tend to say that "Flex development is expensive", and, in the following I will explain why this seems to be the case ...

*Please note:* 
The following information only reflects my personal experience and does not necessarily reflect the view of the Flex community and Adobe.

= "Flex development is expensive" =

== 1. Analysis: How is Flex coding for the moment? ==

...

==== 1. Flex is "New" ====

Flex is a very new technology. Flex 1 just came out in 2004 ... more information [http://en.wikipedia.org/wiki/Adobe_Flex here].

==== 2. Evolution of the Flashplayer and the Flex Framework ====

Adobe plans to update their Flashplayer and Flex framework on faster release cycles (four times a year). While this also has pros, for developers this means your application constantly has to be updated and this could be an issue for big long-term projects.

==== 3. Evolution of Microarchitectures ====

Since the release of the Cairngorm 3 specification Adobe Consulting [http://sourceforge.net/adobe/cairngorm/home/Home/ suggests] the use of third party open source Inversion-of-Control (IoC) Microarchitectures like ([http://www.spicefactory.org/parsley/ Parsley], [http://www.springactionscript.org/ Spring Actionscript], [http://www.swizframework.org/ Swiz], [http://www.robotlegs.org/ Robotlegs], [http://mate.asfusion.com/ Mate]) ... which means: Inject your things! While this can be seen as a great opportunity to the open source community and opens up lots of creativity to these Microarchitectures, this also means for applications, that use these Microarchitectures, that they have to trust into the continuity of a certain Microarchitecture which they use. Furthermore, updating Microarchitectures to their latest version could also be an issue for big long-term projects.

==== 4. Flex 4.x is a "Hybrid" ====

Flex 4.x is a "Hybrid" SDK because Flex 4.x still relies on the old MX-namespace for two main reasons:

  # Downward-compatibility with Flex 3 UIComponents
  # Some MX-components have not been transfered to the Spark-component set yet (e.g. MX-!DateChooser, MX-!ColorPicker, MX-!TabNavigator ... etc.)

Flex 5 promises to tie off this dependency to the MX-namespace, and therefore can be seen again as a pure Flex SDK (just like Flex 3 is).

==== 5. Restrictive Designer/Developer Workflow ====

The designer/developer workflow introduced with Flash Catalyst CS5.5 and Flash Builder 4.5 is fairly restrictive, and therefore, not very productive. For more information about this topic please read these two articles:

http://learn.adobe.com/wiki/display/fcc/Flash+Catalyst+CS5.5+compatibility+schema
http://www.adobe.com/devnet/flashcatalyst/articles/flashcatalyst-compatibility-checker.html

I hope this issue will be improved when Flex 5, Flash Builder 5 and Flash Catalyst CS6 has been released.

==== 6. "Fairly Unexperienced" Developer Community ====

Because Flex is a fairly new technology, the Flex community in average is still "fairly unexperienced", and, in this community there are only a few "very well experienced" Flex Evangelists out there from whom "normal experienced" Flex developers, like me, could learn from. Communities like the Java, ASP.NET or PHP community are much more settled down ... and the chance to find a helping hand in these communities is much more likely than in ours.

==== 7. Missleading Code Examples ====

Even though there are many Flex code examples out there - most of them cover the topic "Component Development in Flex" (like Spark- and MX-Components) - only few information can be found on professional and sustainable "Application-Architecture Development in Flex" in combination with third party Microarchitectures. Because of the lack of these information many Flex projects tend to implement their required application-features with unconventional coding practices.

==== 8. Missing Coding Conventions ====

Even though Adobe promotes the usage of [http://opensource.adobe.com/wiki/display/flexsdk/Coding+Conventions Coding Conventions] the Flex community still seems to be unhappy, and therefore, very creative regarding their own conventions. 

==== 9. Only few code generation tools ====

A lack of code generation tools and wizards to speedup development productivity with Microarchitectures

 * Ant and Maven code generators for services and value objects (VO) ... etc.
 * Flash Catalyst (Generating skins for !SkinnableComponent classes)
 * Flash Builder (Generating services & code templates)
 * Creative Suite Products (Generating skins)

Because of that the development of well featured real world applications using Microarchitectures potentially produces an development overhead when adding new features to these applications.

==== 10. Differing Developer Coding Backgrounds ====

Developers have different coding backgrounds:

  * Flash Developers with different coding skills based on the Flashplayer version (e.g. Flashplayer 7, 8, 9, 10, 11)
 * PHP Developers
 * Java Developers
 * ASP Developers 
 * HTML Developers
 * Javascript Developers
 * ... etc.

==== 11. Few Universities teach Flex Development ====

Only very few universities worldwide teach flex development. Furthermore, because the Flashplayer and Adobe AIR constantly evolves, teachers have to be update their knowledge constantly, which is not always the case.

==== 12. Black-Box Coding with Flashplayer and Adobe AIR ====

==== 13. Content Management Systems  ====

== 2. Evaluation: How would you evaluate the current state of Flex coding? ==

...

== 3. Goals: What should be the goals of Flex coding? ==

 * Highly productive and fast development environment
 * Flex code should be easily mergeable across different flex projects worldwide
 * Flex code should be based on coding standards
 * Flex code should be sustainable and easily maintainable

...

== 4. Alternatives: How to achieve these goals? ==

 * Less release cycles starting with Flex 6 and Flashplayer 12
 * Funding for the developer teams which create Microarchitecture frameworks to speed up their development cycles
 * Open up a Flex Coding Standard Foundation (together with Flex community and Adobe) ... maybe the Spoon Project will help: http://www.spoon.as
 * Integration of a MVC framework to Flex 6 in collaboration with existing Microarchitecture developers
 * MVC code generators In Flash Builder 6 on the basis of the Flex 6 MVC framework

...

== 5. Vision: Where should Flex coding be in the year 2050? ==

...