#summary This page defines the meaning of the word "Nanoarchitecture"

= Nanoarchitecture (or Architectual Patterns) =

Nanoarchitectures are small, architectural design solutions (or [http://en.wikipedia.org/wiki/Architectural_pattern_(computer_science) Architectual Patterns]) based on
Microarchitectures like [http://sourceforge.net/adobe/cairngorm Cairngorm 2.2.1], [http://trac.puremvc.org/PureMVC_AS3/ PureMVC], [http://www.spicefactory.org/parsley/ Parsley], [http://www.springactionscript.org/ Spring Actionscript], [http://www.swizframework.org/ Swiz], [http://mate.asfusion.com/ Mate], [http://www.robotlegs.org/ Robotlegs], [http://flicc.sourceforge.net/ Flicc], [http://code.google.com/p/smartypants-ioc/ SmartyPants] ... and others. Nanoarchitectures differ from the concept of [http://en.wikipedia.org/wiki/Design_pattern_(computer_science) Design Patterns] because Nanoarchitectures focus on defining conventional patterns for the whole application architecture. There are three types of Nanoarchitectures: Interactional, structual and conceptual Nanoarchitectures.

*Interactional Nanoarchitectures*

 * "Model - View - Controller" (MVC or MVCtl)
 * "Model - View - Command" (MVCmd)
 * [NanoarchitectureMVCb "Model - View - Code Behind" (MVCb)]
 * "Model - View - Code Behind - Controller" (MVCbCtl)
 * "Model - View - Code Behind - Command" (MVCbCmd)
 * "Model - View - Code Behind - Task" (MVCbTsk)
 * "Model - View - Code Behind - Story/Task" (MVCbStoTsk)
 * [NanoarchitectureMVCb "Model - View - Component" (MVCp)]
 * "Model - View - Component - Controller" (MVCbCtl)
 * "Model - View - Component - Command" (MVCbCmd)
 * "Model - View - Component - Task" (MVCbTsk)
 * "Model - View - Component - Story/Task" (MVCbStoTsk)

*Structural Nanoarchitectures*

 * "Controller" (Ctl)
 * "Command" (Cmd)
 * "Task" (Tsk)
 * "Story/Task" (!StoTsk)

*Conceptual Nanoarchitectures*

 * [NanoarchitectureNoEvt "No Event" (NoEvt)]
 * [NanoarchitecturePInj "Property Injection" (PInj)]
 * [NanoarchitectureCpll "C-Pull" (Cpll)]
 * [NanoarchitectureCpsh "C-Push" (Cpsh)]

= Code Examples =

Here are some code examples which implement some or all of these above mentioned Nanoarchitectures:

 * [LoginExample LoginExample] written in Flex 3 and Flex 4.1 (MX, Spark) and Flex 4.5 (Spark)
 * [ReligionChooser ReligionChooser] written in Flex 4 (Spark)

= Feedback =

Please feel free to post comments or suggestions because this page is still work in progress.